name: Build Nginx
on: [push]
jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup MSYS2
        id: msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            git
            make
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-libxml2
            mingw-w64-ucrt-x86_64-libxslt
      - name: Prepare source code
        run: |
          echo "::group::Prepare nginx source code"
          wget https://nginx.org/download/nginx-1.26.3.tar.gz
          tar -xzf nginx-1.26.3.tar.gz
          mv nginx-1.26.3 nginx
          mkdir -p nginx/lib nginx/module
          echo "::endgroup::"

          echo "::group::Modify nginx source code for compile module nginx-dav-ext"
          cp -f nginx.auto.lib.libxslt.conf nginx/auto/lib/libxslt/conf
          echo "::endgroup::"

          echo "::group::Prepare openssl source code"
          cd nginx/lib
          wget https://github.com/openssl/openssl/releases/download/openssl-3.5.0/openssl-3.5.0.tar.gz
          tar -xzvf openssl-3.5.0.tar.gz
          echo "::endgroup::"

          echo "::group::Prepare zlib source code"
          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar -xzvf zlib-1.3.1.tar.gz
          echo "::endgroup::"
          
          echo "::group::Prepare pcre source code"
          wget -O pcre-8.45.tar.gz https://sourceforge.net/projects/pcre/files/pcre/8.45/pcre-8.45.tar.gz/download
          tar -xzvf pcre-8.45.tar.gz
          echo "::endgroup::"
          
          echo "::group::Prepare nginx-dav-ext source code"
          cd ../module
          git clone https://github.com/arut/nginx-dav-ext-module.git
          echo "::endgroup::"

          echo "::group::Setup enviroment"
          echo "TIMESTAMP=$(date -u +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          echo "::endgroup::"
      - name: Configure and build
        run: |
        
          echo "::group::Configure"
          cd nginx
          ./configure \
            --prefix= \
            --conf-path=conf/nginx.conf \
            --pid-path=logs/nginx.pid \
            --http-log-path=logs/access.log \
            --error-log-path=logs/error.log \
            --sbin-path=nginx.exe \
            --http-client-body-temp-path=temp/client_body_temp \
            --http-proxy-temp-path=temp/proxy_temp \
            --http-fastcgi-temp-path=temp/fastcgi_temp \
            --http-scgi-temp-path=temp/scgi_temp \
            --http-uwsgi-temp-path=temp/uwsgi_temp \
            --with-cc-opt=-DFD_SETSIZE=1024 \
            --with-pcre=lib/pcre-8.45 \
            --with-zlib=lib/zlib-1.3.1 \
            --with-openssl=lib/openssl-3.5.0 \
            --with-openssl-opt='no-asm no-tests -D_WIN32_WINNT=0x0601' \
            --with-http_ssl_module \
            --with-http_v2_module \
            --with-http_realip_module \
            --with-http_addition_module \
            --with-http_sub_module \
            --with-http_stub_status_module \
            --with-http_flv_module \
            --with-http_mp4_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_auth_request_module \
            --with-http_random_index_module \
            --with-http_secure_link_module \
            --with-http_slice_module \
            --with-mail \
            --with-mail_ssl_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-http_dav_module \
            --add-module=module/nginx-dav-ext-module
          echo "::endgroup::"

          echo "::group::Make"
          make -j16
          echo "::endgroup::"

          echo "::group::Prepare release"
          cd ..
          mkdir release
          cp nginx/objs/nginx.exe release
          cp /ucrt64/bin/libxml2-2.dll release
          cp /ucrt64/bin/liblzma-5.dll release
          cp /ucrt64/bin/libiconv-2.dll release
          cp /ucrt64/bin/zlib1.dll release
          echo "::endgroup::"
      - name: Upload compiled binaries
        uses: actions/upload-artifact@v4
        with:
          name: nginx.1.26.3.${{ env.TIMESTAMP }}
          path: ${{ env.GITHUB_WORKSPACE }}\release